{"version":3,"sources":["mobile.js"],"names":["watchL","watchC","maxAccuracy","meter2feet","feet2mile","initCompass","Compass","needGPS","$","html","needMove","init","getHash","setInterval","doWatch","watch","angle","deviceHeading","setCompass","navigator","ver","test","platform","v","match","parseInt","iOSversion","undefined","msg","date","graticule","functional","noSupport","hash","loc","bearing","accuracy","getJSON","json","LatLon","lat","lng","getLocation","geolocation","getCurrentPosition","position","coords","latitude","longitude","text","toFixed","addClass","removeClass","enableHighAccuracy","timeout","maximumAge","heading","css","show","dist","distanceTo","unit","bearingTo","now","Date","toLocaleString","hide","dist2","unit2"],"mappings":"AAAA,IACAA,OAAAC,OADAC,YAAA,IAEAC,WAAA,QACAC,UAAA,KA6BA,SAAAC,cACAC,QAAAC,QAAA,WACAC,EAAA,YAAAC,KAAA,qDACAC,SAAA,WACAF,EAAA,YAAAC,KAAA,yCACAE,KAAA,WACAH,EAAA,YAAAC,KAAA,0CACAG,UACAZ,OAAAa,YAAAC,QAAA,KACAb,OAAAK,QAAAS,MAAA,SAAAC,GACAC,cAAAD,EACAE,iBAvCAV,EAAA,WACA,GAAA,gBAAAW,UAAA,CAOAC,IANA,WACA,GAAA,iBAAAC,KAAAF,UAAAG,UAAA,CACA,IAAAC,EAAAJ,UAAA,WAAAK,MAAA,0BACA,MAAA,CAAAC,SAAAF,EAAA,GAAA,IAAAE,SAAAF,EAAA,GAAA,IAAAE,SAAAF,EAAA,IAAA,EAAA,MAGAG,GACAC,MAAAP,KAAA,IAAAA,IAAA,IAAA,GAAAA,IAAA,GACAQ,IAAA,6FAEAA,IAAA,2NAAAC,KAAA,IAAAC,UAAA,kBAEAC,YAAA,EACAzB,QAAA0B,UAAA,WACAxB,EAAA,YAAAC,KAAAmB,KACAG,YAAA,IAGAA,YACA1B,mBAGAG,EAAA,YAAAC,KAAA,sDAqBA,IAAAwB,KAAA,KACAC,IAAA,KACAjB,cAAA,EACAkB,QAAA,EACAC,SAAA,IAEA,SAAAxB,UACAJ,EAAA6B,QACA,+BAAAR,KAAA,IAAAC,UAAA,QACA,SAAAQ,GACAL,KAAAM,OAAAD,EAAAE,IAAAF,EAAAG,OAMA,SAAAC,cAMAvB,UAAAwB,YAAAC,mBAAA,SAAAC,GACAX,IAAAK,OAAAM,EAAAC,OAAAC,SAAAF,EAAAC,OAAAE,WACAxC,EAAA,aAAAyC,KAAAJ,EAAAC,OAAAV,SAAA,SAAAS,EAAAC,OAAAV,SAAAjC,YAAA+C,QAAA,GAAA,OACAd,SAAAS,EAAAC,OAAAV,SAAAc,QAAA,GACAhD,YAAAkC,SACA5B,EAAA,aAAA2C,SAAA,OAEA3C,EAAA,aAAA4C,YAAA,QAEA,aAdA,CACAC,oBAAA,EACAC,QAAA,IACAC,WAAA,IAcA,SAAArC,aACAsC,QAAA,IAAAvC,cAAAkB,QACA3B,EAAA,UAAAiD,IAAA,iBAAA,UAAAD,QAAA,QACAhD,EAAA,UAAAiD,IAAA,oBAAA,UAAAD,QAAA,QACAhD,EAAA,UAAAiD,IAAA,eAAA,UAAAD,QAAA,QACAhD,EAAA,UAAAiD,IAAA,gBAAA,UAAAD,QAAA,QAGA,SAAA1C,UAEA,GADA4B,cACA,OAAAT,MAAA,OAAAC,IAAA,CAMA,GALA1B,EAAA,YAAAkD,OACAC,KAAAzB,IAAA0B,WAAA3B,MACA4B,KAAA,IACA1B,QAAAD,IAAA4B,UAAA7B,MAEA0B,KAAAvB,UAAAA,SAAAlC,YAAA,CACAM,EAAA,YAAA2C,SAAA,WACA3C,EAAA,WAAAkD,OACA,IAAAK,EAAA,IAAAC,KACAxD,EAAA,WAAAC,KAAA,qEAAAoB,KAAA,IAAAC,UAAA,qCAAAiC,EAAAE,iBAAA,aAEAzD,EAAA,YAAA4C,YAAA,WACA5C,EAAA,WAAA0D,OAEA,IAAAC,EAAAR,KAAAxD,WACA,KAAAwD,OACAA,MAAA,IACAE,KAAA,MAEAO,MAAA,KACAhE,UAAA+D,IACAA,GAAA/D,UACAgE,MAAA,MAGA5D,EAAA,aAAAyC,KAAAU,KAAAT,QAAA,GAAA,IAAAW,KAAA,MAAAM,EAAAjB,QAAA,GAAA,IAAAkB","file":"mobile.min.js","sourcesContent":["var maxAccuracy = 100;\nvar watchL,watchC;\nvar meter2feet = 3.28084;\nvar feet2mile = 5280;\n$(function(){\n\tif (\"geolocation\" in navigator){\n\t\tfunction iOSversion() {\n\t\t\tif (/iP(hone|od|ad)/.test(navigator.platform)) {\n\t\t\t\tvar v = (navigator.appVersion).match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\t\t\t\treturn [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)];\n\t\t\t}\n\t\t}\n\t\tver = iOSversion();\n\t\tif(ver != undefined && ver[0]==12 && ver[1]==2){\n\t\t\tmsg = '<br/>Please allow Motion & Orientation Access in Settings > Safari for the compass to work';\n\t\t} else {\n\t\t\tmsg = '<br/>Compass is not available on your device.<br/><br/>You can use the QR code to open this page on your mobile.<br/><img src=\"https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=https://geohashing.info/mobile/'+date+'/'+graticule+'&choe=UTF-8\" />';\n\t\t}\n\t\tfunctional = true;\n\t\tCompass.noSupport(function () {\n\t\t\t$('#compass').html(msg);\n\t\t\tfunctional = false;\n\t\t});\n\t\t\n\t\tif(functional){\n\t\t\tinitCompass();\n\t\t}\n\t} else {\n\t\t$('#compass').html('<br/>Geolocation is not available on your device');\n\t}\n});\n\nfunction initCompass(){\n\tCompass.needGPS(function () {\n\t\t$('#compass').html('<br/>GPS signal needed to get compass direction');\n\t}).needMove(function () {\n\t\t$('#compass').html('<br/>Please move to get orientation');\n\t}).init(function () {\n\t\t$('#compass').html('<br/><div id=\"arrow\"><div></div></div>');\n\t\tgetHash();\n\t\twatchL = setInterval(doWatch, 1000);\n\t\twatchC = Compass.watch(function (angle) {\n\t\t\tdeviceHeading = angle;\n\t\t\tsetCompass();\n\t\t});\n\t\t\n\t});\n}\n\nvar hash = null;\nvar loc = null;\nvar deviceHeading = 0;\nvar bearing = 0;\nvar accuracy = 999;\n\nfunction getHash(){\n\t$.getJSON(\n\t\t'//data.geohashing.info/hash/'+date+'/'+graticule+'.json',\n\t\tfunction(json){\n\t\t\thash = LatLon(json.lat, json.lng);\n\t\t}\n\t);\n\t\n}\n\nfunction getLocation(){\n\tvar options = {\n\t\tenableHighAccuracy: true,\n\t\ttimeout: 5000,\n\t\tmaximumAge: 0\n\t};\n\tnavigator.geolocation.getCurrentPosition(function(position){\n\t\tloc = LatLon(position.coords.latitude, position.coords.longitude);\n\t\t$('#accuracy').text(position.coords.accuracy + ' m / ' + (position.coords.accuracy*meter2feet).toFixed(0) + ' ft');\n\t\taccuracy = position.coords.accuracy.toFixed(0);\n\t\tif(accuracy > maxAccuracy){\n\t\t\t$('#accuracy').addClass('low');\n\t\t} else {\n\t\t\t$('#accuracy').removeClass('low');\n\t\t}\n\t},function(){},options);\n}\n\nfunction setCompass(){\n\theading = 360-deviceHeading+bearing;\n\t$('#arrow').css('-moz-transform', 'rotate('+heading+'deg)');\n\t$('#arrow').css('-webkit-transform', 'rotate('+heading+'deg)');\n\t$('#arrow').css('-o-transform', 'rotate('+heading+'deg)');\n\t$('#arrow').css('-ms-transform', 'rotate('+heading+'deg)');\n}\n\nfunction doWatch(){\n\tgetLocation();\n\tif(hash !== null && loc !== null){\n\t\t$('#compass').show();\n\t\tdist = loc.distanceTo(hash);\n\t\tunit = 'm';\n\t\tbearing = loc.bearingTo(hash);\n\n\t\tif(dist < accuracy && accuracy < maxAccuracy){\n\t\t\t$('#compass').addClass('reached');\n\t\t\t$('#status').show();\n\t\t\tvar now = new Date();\n\t\t\t$('#status').html('<h2>Congratulations!</h2><p>You have reached the<br/><br/><strong>'+date+' '+graticule+'</strong><br/><br/> hash on</p><p>'+now.toLocaleString()+'</p>');\n\t\t} else {\n\t\t\t$('#compass').removeClass('reached');\n\t\t\t$('#status').hide();\n\t\t}\n\t\tvar dist2 = dist*meter2feet;\n\t\tif(dist > 9999){\n\t\t\tdist = dist/1000;\n\t\t\tunit = 'km';\n\t\t}\n\t\tunit2 = 'ft'\n\t\tif(dist2 > feet2mile){\n\t\t\tdist2 = dist2/feet2mile;\n\t\t\tunit2 = 'mi';\n\t\t}\n\t\t\n\t\t$('#distance').text(dist.toFixed(2)+ ' ' + unit + ' / ' + dist2.toFixed(2)+' '+unit2);\n\t\t\n\t}\n\t\n}\n"]}